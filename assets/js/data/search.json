[ { "title": "Introducción a Spring Boot", "url": "/posts/spring-boot-intro/", "categories": "JAVA, SPRING BOOT", "tags": "java, SPRING BOOT", "date": "2024-09-05 17:00:00 -0300", "snippet": "IntroSpring Boot ha revolucionado el desarrollo de aplicaciones Java al simplificar la configuración y permitir a los desarrolladores centrarse en lo que realmente importa: construir aplicaciones de manera rápida y eficiente. Si eres un desarrollador Java y aún no has trabajado con Spring Boot, este artículo te guiará a través de sus fundamentos y te mostrará por qué es una herramienta indispensable en el desarrollo moderno.¿Qué es Spring Boot?Spring Boot es un framework basado en el popular Spring Framework, diseñado para facilitar el desarrollo de aplicaciones Java al proporcionar configuraciones automáticas y una arquitectura lista para usar. Mientras que el Spring Framework tradicional requiere una cantidad considerable de configuración manual, Spring Boot elimina esa complejidad con un enfoque “convención sobre configuración”.¿Por qué usar Spring Boot?Spring Boot permite a los desarrolladores crear aplicaciones web, microservicios y aplicaciones empresariales con muy poco esfuerzo de configuración inicial. Aquí te dejamos algunas de las principales ventajas: Configuración mínima: Con Spring Boot, puedes crear aplicaciones completas sin tener que configurar archivos XML o escribir largas configuraciones manuales. Servidor embebido: Spring Boot viene con servidores web integrados como Tomcat, Jetty o Undertow, lo que te permite ejecutar aplicaciones sin necesidad de configurar servidores externos. Enfoque modular: Permite añadir fácilmente módulos o dependencias con el uso de starters, que son colecciones preconfiguradas de dependencias. Comunidades y soporte: Como parte del ecosistema de Spring, cuenta con una vasta comunidad que desarrolla soluciones y ofrece soporte.Empezando con Spring BootPara comenzar, lo primero que necesitas es configurar tu entorno de desarrollo. Puedes usar una herramienta como Spring Initializr, una plataforma en línea que te permite generar rápidamente un proyecto básico de Spring Boot con las dependencias que necesitas. Aquí te mostramos los pasos básicos:Generar un proyecto con Spring Initializr: Dirígete a Spring Initializr. Selecciona las opciones básicas para tu proyecto (versión de Java, tipo de empaquetado, etc.). Añade dependencias como “Spring Web” para crear una aplicación web. Haz clic en “Generate” y descarga el proyecto. Explora la estructura del proyecto: Una vez descargado el proyecto, verás una estructura clara y ordenada, con un archivo principal Application.java donde reside el punto de entrada de la aplicación. Crear un controlador sencillo: Añade un controlador básico que gestione una solicitud HTTP GET y devuelva un saludo:@RestControllerpublic class HelloController { @GetMapping(&quot;/hello&quot;) public String hello() { return &quot;¡Hola, Spring Boot!&quot;; }} Ejecuta tu aplicación: Puedes ejecutar tu aplicación directamente desde tu IDE (como IntelliJ o Eclipse) o desde la terminal usando el comando:mvn spring-boot:runAccede a http://localhost:8080/hello en tu navegador y verás tu mensaje “¡Hola, Spring Boot!”.Características clave de Spring Boot Auto configuración: Spring Boot analiza las dependencias y configura automáticamente el entorno según las necesidades del proyecto. Profiles: Te permite configurar diferentes entornos (desarrollo, producción, pruebas) utilizando perfiles en los archivos de configuración. Actuator: Proporciona endpoints que te permiten monitorizar y gestionar tu aplicación en tiempo real. Spring Boot Starters: Son paquetes que contienen las dependencias necesarias para que diferentes tipos de aplicaciones funcionen correctamente. Por ejemplo, spring-boot-starter-web incluye todo lo necesario para crear aplicaciones web con Spring MVC.ConclusiónSpring Boot es una herramienta poderosa que acelera el desarrollo de aplicaciones Java al ofrecer configuraciones predeterminadas y prácticas listas para usar. Si eres un desarrollador Java que busca simplificar el proceso de construcción de aplicaciones robustas, Spring Boot es una excelente opción para comenzar. En futuros artículos profundizaremos en temas como el manejo de bases de datos con Spring Data JPA, la creación de servicios RESTful y cómo implementar microservicios usando Spring Cloud." }, { "title": "Yoga", "url": "/posts/yoga/", "categories": "YOGA", "tags": "yoga", "date": "2021-05-10 19:30:00 -0300", "snippet": "¿Que es yoga?Según Wikipedia el yoga (del sánscrito yoga \\‘unión\\’, योग en devanagari) es una tradicional disciplina física y mental que se originó en la India. El yoga enfatiza la meditación y la liberación y su texto principal es el Yoga sutra (400 d.C.).La palabra se asocia con prácticas de meditación en el hinduismo, el budismo y el jainismo.El yoga tiene varias escuelas: las fundamentales son el raya yoga, jñana yoga y karma yoga, y las no fundamentales incluyen hatha yoga, bhakti, ashtanga vinyasa yoga, kriyā yoga y kundalini yoga. La historia de los orígenes del yoga es tan antigua como compleja, interesante, y muy vasta.Para algunos es una filosofía de vida, para otros un deporte, hoy en día las tradiciones de yoga que han evolucionado a lo largo de las generaciones, siguen estando muy vivas en la India, pero también cada vez son más populares en Occidente, donde se han creado nuevas variaciones y estilos y se ha vuelto accesible para todos.Lo cierto es que el yoga no es todo acerca de flexión y torsión del cuerpo en formas extrañas, yoga es mucho más, en palabras muy simples, darle atención al cuerpo, la mente y la respiración, claro que este es un enfoque personal.La práctica incluye: posturas de yoga (asanas), técnicas de respiración (pranayama) y meditación. El Yoga trae la mente al momento presente, mejorando su claridad y su estado de alerta. Así, la mente se pacifica y puede lidiar con el estrés diario.Yoga y programaciónComo programadores, nos enfrentamos a momentos de stress y tensión a diario, lidiamos con la frustración de que nuestro código no compila, de que estamos tardando demasiado en encontrar el bug, o que se acerca esa fecha de entrega y nos falta un montón de trabajo por hacer, etc.En lo personal, cuando me tranco en alguna parte del código, siento que es bueno levantarse de la silla, caminar un poco, respirar hondo, y dejar pasar por lo menos unos minutos para volver a intentarlo. ¿Y dónde entra el yoga en todo esto? Hace más de un año que vengo practicando yoga y meditación, y la verdad que me ha cambiado la vida. Desde la parte física, mi espalda se siente mucho mejor, ayuda mucho una clase de yoga, a soportar el pasar tantas horas al día sentado en una silla. Desde la parte mental, recomiendo totalmente la meditación, si se puede por lo menos 20 minutos al día, es un alivio a la mente, y si no, practicarla por lo menos una vez a la semana, y te aseguro que tu mente estará más calmada, tranquila y enfocada en el presente.En el correr de las semanas, trataré de ir subiendo contenido acerca del yoga, práctica que uso y recomiendo.De mientras, dejo un link de la BBC con un artículo que me pareció interesante." }, { "title": "Programación orientada a objetos con Java", "url": "/posts/poo-en-java/", "categories": "JAVA, OOP", "tags": "java, oop", "date": "2021-05-07 17:00:00 -0300", "snippet": "IntroEn este, mi primer post, comenzare hablando sobre los conceptos básicos de la programación orientada a objetos.La POO(Programación orientada a objetos) es un paradigma surgido en los años 1970, que utiliza objetos como elementos fundamentales en la construcción de la solución.Definiciones y conceptos básicos Definición de objeto: Un objeto es una entidad, una cosa, una representación de algo (puede ser una idea o concepto ) en el mundo. Se aloja en memoria, tiene una identidad propia, guarda valores y brinda una forma de acceder y modificar esos valores (aunque pueden ser valores de solo lectura ). Definición de Clase: Una clase describe un conjunto de objetos. Es lo que describe como es el objeto y su comportamiento. En Java por ejemplo, por convención, los nombres de las clases comienzan siempre en mayúsculas. Relación entre Clase y Objeto: Un objeto es un caso concreto de una clase, una instancia. La clase es lo que codificamos en un lenguaje de programación, mientras que los objetos se crean en memoria mientras se ejecuta el programa, tomando como &quot;plantilla &quot; o &quot; plano “ a su clase. Definición de Identidad: La identidad es una caracteristica de todos los objetos, todos los objetos son capaces de diferenciarse entre sí gracias a esa identidad. La identidad de un objeto esta dada automáticamente, no hay que hacer ni programar nada. Mas abajo en este post, encontraras un link a un repo donde explico estos conceptos en código. Definición de Atributo: Un atributo es una variable que se declara dentro de una clase. Por ejemplo, si creamos una clase Persona y queremos que cada Persona tenga un nombre, declaramos el atributo nombre, de tipo string dentro de la clase Persona. De esa forma todos los objetos instancia de la clase Person, tendrán su propio nombre. Definición de Operación: Una operación es una especificación de una función que se le pedira al objeto que ejecute. Se resalta especificación ya que la operación dice que es o que tiene que hacer el objeto, pero no indica el como. Entonces una operación, no es más que el encabezado de una función, que dice el nombre, lo que devuelve y una lista de parámetros. Definición de Método: Es la implementación de una operación. Es el cuerpo de la función, el código útil que dice como vamos a llevar a cabo la operación. Es el método que hay que seguir para llevar adelante la operación. Definición de Estado: El estado de un objeto es el conjunto de los valores de los atributos en un instante en el tiempo. Se implementa a través de los atributos de su clase, y es algo dinámico, que puede cambiar con el tiempo. Definición de Comportamiento: El comportamiento de un objeto es el conjunto de operaciones que el objeto puede ejecutar. Esta dado entonces por las operaciones definidas en su clase. Algunos comentarios más sobre Clases y objetos: En los lenguajes que presentan modificadores de acceso como Java, es importante encapsular los atributos. Eso implica que no deben ser accedidos directamente desde fuera de la clase que fueron declarados, pero si deben estar disponibles para todos los miembros de la clase, esto se logra declarando los atributos como privados (modificador de acceso private ) . Para que se pueda acceder al valor de los atributos desde fuera de la clase, se utilizan los métodos get y set, que permiten acceder (get) y modificar (set) el valor de estos. Estos métodos se declaran públicos (modificador de acceso public). No es necesario declarar ambos si no se precisan, por ejemplo, se puede declarar un atributo de solo lectura, haciendo el atributo privado y permitiendo solo acceder al mismo mediante el método get. Para terminar sobre los modificadores de acceso, en Java existen 4: default(accessible desde el mismo package), private(accesible solo desde misma clase), protected(accesible para clases, subclases, y package) y public que es accesible desde cualquier parte. En el próximo post, se va a explicar lo de las subclase o clases heredadas. Bueno, esto ha sido una pequeña y breve introducción al paradigma orientado a objetos. Cualquier duda me puedes escribir. Espero que esto pueda ser de utilidad, y con el correr de los días seguiré agregando contenido. Dejo un repositorio con ejemplos de los temas aquí tratados." } ]
